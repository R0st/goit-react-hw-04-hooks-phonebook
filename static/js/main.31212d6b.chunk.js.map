{"version":3,"sources":["component/ContactForm/ContactForm.js","component/ContactList/ContactList.js","component/Filter/Filter.js","App.js","index.js","component/ContactForm/ContactForm.module.css","component/ContactList/ContactList.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","reset","className","style","e","preventDefault","ContactLabel","htmlFor","ContactInput","type","pattern","title","required","id","onChange","ContactBtn","ContactList","contacts","onDeleteContact","ContactListUl","map","ContactListLi","ContactBtnDel","onClick","Filter","initialContacts","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","contact","includes","alert","prevState","normalizedFilter","toLowerCase","getFilteredContacts","contactId","prevContacts","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.31212d6b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport style from './ContactForm.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const nameInputId = uuidv4();\r\n    const numberInputId = uuidv4();\r\n\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            \r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            \r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    \r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        onSubmit(name, number);\r\n        return reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setNumber(\"\");\r\n        setName(\"\")\r\n    }\r\n    return (\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n            <label className={style.ContactLabel} htmlFor={nameInputId}>\r\n                Имя\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n                    // required\r\n                    id={nameInputId}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label htmlFor={numberInputId} className={style.ContactLabel}>\r\n                Номер\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    id={numberInputId} />\r\n            </label>\r\n\r\n            <button\r\n                className={style.ContactBtn}\r\n                type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n    ContactForm.propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.number,\r\n    };\r\n//     state = {\r\n//         number: \"\",\r\n//         name: \"\",\r\n//     }\r\n\r\n//     nameInputId = uuidv4();\r\n//     numberInputId = uuidv4();\r\n\r\n//     handleChange = e => {\r\n//         const { name, value } = e.currentTarget;\r\n//         this.setState({ [name]: value });\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         this.props.onSubmit(this.state.name, this.state.number)\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({name: \"\", number: \"\"})\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <form className={style.ContactForm} onSubmit={this.handleSubmit}>\r\n//                 <label className={style.ContactLabel} htmlFor={this.nameInputId}>\r\n//                     Имя\r\n//                     <input\r\n//                         className={style.ContactInput}\r\n//                         type=\"text\"\r\n//                         name=\"name\"\r\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"required\r\n//                         // required\r\n//                         id={this.nameInputId}\r\n//                         value={this.state.name}\r\n//                         onChange={this.handleChange}\r\n//                     />\r\n//                 </label>\r\n//                 <label htmlFor={this.numberInputId} className={style.ContactLabel}>\r\n//                     Номер\r\n//                     <input\r\n//                         className={style.ContactInput}\r\n//                         type=\"tel\"\r\n//                         name=\"number\"\r\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                         required\r\n//                         value={this.state.number}\r\n//                         onChange={this.handleChange}\r\n//                         id={this.numberInputId}/>\r\n//                 </label>\r\n\r\n//                 <button \r\n//                     className={style.ContactBtn}\r\n//                     type=\"submit\">Add contact</button>\r\n//             </form>\r\n//         );\r\n//     }   \r\n// }\r\n\r\n// export default ContactForm;","import React from 'react'\r\nimport style from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <ul className={style.ContactListUl}>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li className={style.ContactListLi} key={id}>\r\n                <p>{name}: \r\n                    <span>{number}</span>\r\n                </p> \r\n                <button \r\n                    className={style.ContactBtnDel}\r\n                    onClick={()=>onDeleteContact(id)}>Delete</button>  \r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    \r\n    <label>\r\n          Find contacts by name\r\n          <input \r\n            type=\"text\" \r\n            value={value}\r\n            onChange={onChange}/>\r\n        </label>\r\n)\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n\r\n","import React, { useState,useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './component/ContactForm/ContactForm';\nimport ContactList from './component/ContactList';\nimport Filter from './component/Filter/Filter';\n\nconst initialContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts\n  });\n\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  }\n  \n  const addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    if (!contacts.map(contact => contact.name).includes(name)) {\n      setContacts(prevState => [contact, ...prevState]);\n    }\n  else {\n      alert(`${name} is already in contacs.`)\n    }\n  };\n  \n  // const handleNameChange = event => {\n  //   setState({name: event.currentTarget.value})\n  // }\n\n  // formSubmitHandler = data => {\n  //   console.log(data);\n  // }\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }\n\n  const deleteContact = contactId => {\n    setContacts(prevContacts=> prevContacts.filter(contact=>contact.id !==contactId))\n  }\n  \n  return (\n        <>\n        <h1>Phonebook</h1>\n          <ContactForm onSubmit={addContact} />\n          <h2>Contacts</h2>\n          <ContactList contacts={getFilteredContacts()} onDeleteContact={deleteContact}/>\n          <Filter value={filter} onChange={changeFilter}/>\n      </>\n    )\n}\n// class App extends Component {\n//   state = {\n//   contacts: [\n//     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n//     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n//     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n//     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n//   ],\n//   filter: '',\n// }\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n    \n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.constacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }  \n  \n//   changeFilter = e => {\n//     this.setState({filter: e.currentTarget.value});\n// }\n  \n//   addContact = (name, number) => {\n//     const contact = {\n//       id: uuidv4(),\n//       name,\n//       number,\n//     };\n\n// if (!this.state.contacts.map(contact => contact.name).includes(name)) {\n\n//     this.setState(({contacts}) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   }\n//   else {\n//       alert(`${name} is already in contacs.`)\n//     }\n//   };\n  \n//   handleNameChange = event => {\n//     this.setState({name: event.currentTarget.value})\n//   }\n\n//   // formSubmitHandler = data => {\n//   //   console.log(data);\n//   // }\n\n//   getFilteredContacts = () => {\n//     const {filter, contacts} = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   }\n\n//   deleteContact = contactId => {\n//     this.setState(prevState=> ({\n//       contacts: prevState.contacts.filter(contact=>contact.id !==contactId)\n//     }))\n//   }\n  \n//   render() {\n//     const { filter } = this.state;\n//     const filteredContacts = this.getFilteredContacts();\n\n//     return (\n//         <>\n//         <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.addContact} />\n//           <h2>Contacts</h2>\n//           <ContactList contacts={filteredContacts} onDeleteContact={this.deleteContact}/>\n//           <Filter value={filter} onChange={this.changeFilter}/>\n//       </>\n//     )\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__3iuaB\",\"ContactLabel\":\"ContactForm_ContactLabel__26OHx\",\"ContactInput\":\"ContactForm_ContactInput__3jUZg\",\"ContactBtn\":\"ContactForm_ContactBtn__2uL_g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListLi\":\"ContactList_ContactListLi__1mx1c\",\"ContactBtnDel\":\"ContactList_ContactBtnDel__3qp9N\"};"],"sourceRoot":""}